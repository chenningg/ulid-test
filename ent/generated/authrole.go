// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chenningg/ulid-test/auth"
	"github.com/chenningg/ulid-test/ent/generated/authrole"
	"github.com/oklog/ulid/v2"
	ulid "github.com/oklog/ulid/v2"
)

// AuthRole is the model entity for the AuthRole schema.
type AuthRole struct {
	config `json:"-"`
	// ID of the ent.
	ID ulid.ULID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Role holds the value of the "role" field.
	Role auth.AuthRole `json:"role,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AuthRoleQuery when eager-loading is set.
	Edges AuthRoleEdges `json:"edges"`
}

// AuthRoleEdges holds the relations/edges for other nodes in the graph.
type AuthRoleEdges struct {
	// Accounts holds the value of the accounts edge.
	Accounts []*Account `json:"accounts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e AuthRoleEdges) AccountsOrErr() ([]*Account, error) {
	if e.loadedTypes[0] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthRole) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case authrole.FieldRole:
			values[i] = new(auth.AuthRole)
		case authrole.FieldDescription:
			values[i] = new(sql.NullString)
		case authrole.FieldCreatedAt, authrole.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case authrole.FieldID:
			values[i] = new(ulid.ULID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AuthRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthRole fields.
func (ar *AuthRole) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authrole.FieldID:
			if value, ok := values[i].(*ulid.ULID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ar.ID = *value
			}
		case authrole.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ar.CreatedAt = value.Time
			}
		case authrole.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ar.UpdatedAt = value.Time
			}
		case authrole.FieldRole:
			if value, ok := values[i].(*auth.AuthRole); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value != nil {
				ar.Role = *value
			}
		case authrole.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ar.Description = new(string)
				*ar.Description = value.String
			}
		}
	}
	return nil
}

// QueryAccounts queries the "accounts" edge of the AuthRole entity.
func (ar *AuthRole) QueryAccounts() *AccountQuery {
	return (&AuthRoleClient{config: ar.config}).QueryAccounts(ar)
}

// Update returns a builder for updating this AuthRole.
// Note that you need to call AuthRole.Unwrap() before calling this method if this AuthRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AuthRole) Update() *AuthRoleUpdateOne {
	return (&AuthRoleClient{config: ar.config}).UpdateOne(ar)
}

// Unwrap unwraps the AuthRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AuthRole) Unwrap() *AuthRole {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("generated: AuthRole is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AuthRole) String() string {
	var builder strings.Builder
	builder.WriteString("AuthRole(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ar.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ar.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ar.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", ar.Role))
	builder.WriteString(", ")
	if v := ar.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// AuthRoles is a parsable slice of AuthRole.
type AuthRoles []*AuthRole

func (ar AuthRoles) config(cfg config) {
	for _i := range ar {
		ar[_i].config = cfg
	}
}
