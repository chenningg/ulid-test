// Code generated by "enumer -type=AuthRole -json -text -sql"; DO NOT EDIT.

package auth

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _AuthRoleName = "DemoFreePlusProEnterpriseSupportAdminSuperAdmin"

var _AuthRoleIndex = [...]uint8{0, 4, 8, 12, 15, 25, 32, 37, 47}

const _AuthRoleLowerName = "demofreeplusproenterprisesupportadminsuperadmin"

func (i AuthRole) String() string {
	i -= 1
	if i < 0 || i >= AuthRole(len(_AuthRoleIndex)-1) {
		return fmt.Sprintf("AuthRole(%d)", i+1)
	}
	return _AuthRoleName[_AuthRoleIndex[i]:_AuthRoleIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AuthRoleNoOp() {
	var x [1]struct{}
	_ = x[Demo-(1)]
	_ = x[Free-(2)]
	_ = x[Plus-(3)]
	_ = x[Pro-(4)]
	_ = x[Enterprise-(5)]
	_ = x[Support-(6)]
	_ = x[Admin-(7)]
	_ = x[SuperAdmin-(8)]
}

var _AuthRoleValues = []AuthRole{Demo, Free, Plus, Pro, Enterprise, Support, Admin, SuperAdmin}

var _AuthRoleNameToValueMap = map[string]AuthRole{
	_AuthRoleName[0:4]:        Demo,
	_AuthRoleLowerName[0:4]:   Demo,
	_AuthRoleName[4:8]:        Free,
	_AuthRoleLowerName[4:8]:   Free,
	_AuthRoleName[8:12]:       Plus,
	_AuthRoleLowerName[8:12]:  Plus,
	_AuthRoleName[12:15]:      Pro,
	_AuthRoleLowerName[12:15]: Pro,
	_AuthRoleName[15:25]:      Enterprise,
	_AuthRoleLowerName[15:25]: Enterprise,
	_AuthRoleName[25:32]:      Support,
	_AuthRoleLowerName[25:32]: Support,
	_AuthRoleName[32:37]:      Admin,
	_AuthRoleLowerName[32:37]: Admin,
	_AuthRoleName[37:47]:      SuperAdmin,
	_AuthRoleLowerName[37:47]: SuperAdmin,
}

var _AuthRoleNames = []string{
	_AuthRoleName[0:4],
	_AuthRoleName[4:8],
	_AuthRoleName[8:12],
	_AuthRoleName[12:15],
	_AuthRoleName[15:25],
	_AuthRoleName[25:32],
	_AuthRoleName[32:37],
	_AuthRoleName[37:47],
}

// AuthRoleString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AuthRoleString(s string) (AuthRole, error) {
	if val, ok := _AuthRoleNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AuthRoleNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AuthRole values", s)
}

// AuthRoleValues returns all values of the enum
func AuthRoleValues() []AuthRole {
	return _AuthRoleValues
}

// AuthRoleStrings returns a slice of all String values of the enum
func AuthRoleStrings() []string {
	strs := make([]string, len(_AuthRoleNames))
	copy(strs, _AuthRoleNames)
	return strs
}

// IsAAuthRole returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AuthRole) IsAAuthRole() bool {
	for _, v := range _AuthRoleValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AuthRole
func (i AuthRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AuthRole
func (i *AuthRole) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AuthRole should be a string, got %s", data)
	}

	var err error
	*i, err = AuthRoleString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for AuthRole
func (i AuthRole) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for AuthRole
func (i *AuthRole) UnmarshalText(text []byte) error {
	var err error
	*i, err = AuthRoleString(string(text))
	return err
}

func (i AuthRole) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *AuthRole) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of AuthRole: %[1]T(%[1]v)", value)
	}

	val, err := AuthRoleString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
